// Keywords: nonWF, non-Wright-Fisher, Wright-Fisher, non-overlapping generations, discrete generations, random mating, population decline, pedigree
// This is just a skeleton model for generating a pedigree and recording demographic information for a dioecious population with a given initial population size and timing of decline.
// We will use this pedigree in subsequent steps to generate tree sequences for each chromosome

initialize() {
// Initialize model type (non-Wright-Fisher, although this has many aspects of a Wright-Fisher model 
	initializeSLiMModelType("nonWF");
// Use tree sequence recording
	initializeTreeSeq();
// Two differentiated sexes
	initializeSex("A");
// This will just be a single short homogenous chromosome with no mutation or recombination for now - we will generate realistic chromosomes according to the pedigree using separate simulations 
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationRate(0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 9999);
	initializeRecombinationRate(0);
// delete any existing pedigree log files - change these to variables later
	deleteFile(matingfile);
}


// Random mating with a specified # of offspring. For each offspring randomly choose one male and one female parent. Recording parent IDs in order to output distribution of reproductive success later. In this reproduction call I am also outputting some info about # of breeding-age individuals and distribution of parentage.

reproduction(p1,"F") {
	K = sim.getValue("K");
	femalelist=NULL;
	malelist=NULL;
	for (i in seqLen(asInteger(K)))
	{
		female = p1.sampleIndividuals(1,sex="F");
		male = p1.sampleIndividuals(1,sex="M");
		child = p1.addCrossed(female, male);
		child.tag = sim.tag;
		sim.tag = sim.tag + 1;
		matingline = paste(c(sim.generation, female.tag, male.tag, child.tag));
		writeFile(matingfile, matingline, append=T);
	}
	breederdat=c("generation:",sim.generation,"num_breedingage_males:",sum(p1.individuals.sex == "M"),"num_breedingage_females:",sum(p1.individuals.sex == "F"));
	breedline=paste(breederdat,sep=" ");
	writeFile(breederfile,breedline,append=T);
	self.active = 0;
}

// here come some vars
1 early() {
	sim.setValue("breederfile", breederfile);
	sim.setValue("matingfile", matingfile);
	sim.setValue("t120sampfile", t120sampfile);
	sim.setValue("t90sampfile", t90sampfile);
	sim.setValue("t60sampfile", t60sampfile);
	sim.setValue("t30sampfile", t30sampfile);
	sim.setValue("t0sampfile", t0sampfile);
}


// First generation: set # of offspring and K to Nhistoric
1 early() {
	sim.setValue("K", Nhistoric);
	sim.addSubpop("p1", Nhistoric);
	
	// provide initial tags and remember the next tag value
	p1.individuals.tag = 1:Nhistoric;
	sim.tag = Nhistoric+1;
}

// Population decline: if simulation time is greater than or equal to Tdecline, exponential reduction in # of offspring. Can have a stable population if Tdecline is set to > 220.
early(){
	if (sim.generation > Tdecline) {
		sim.setValue("K",round(sim.getValue("K")*lambda));
		}
}

// Survival for non-overlapping generations - all individuals from previous generation die at the end of time step
early()
{
	inds = sim.subpopulations.individuals;
	inds[inds.age > 0].fitnessScaling = 0.0;
}

100 late() { t120samp=paste(sample(p1.individuals.tag,min(100,length(p1.individuals))),sep="\n");writeFile(t120sampfile,t120samp); }

130 late() { t90samp=paste(sample(p1.individuals.tag,min(100,length(p1.individuals))),sep="\n");writeFile(t90sampfile,t90samp); }

160 late() { t60samp=paste(sample(p1.individuals.tag,min(100,length(p1.individuals))),sep="\n");writeFile(t60sampfile,t60samp); }

190 late() { t30samp=paste(sample(p1.individuals.tag,min(100,length(p1.individuals))),sep="\n");writeFile(t30sampfile,t30samp); }

220 late() { t0samp=paste(sample(p1.individuals.tag,min(100,length(p1.individuals))),sep="\n");writeFile(t0sampfile,t0samp); }

220 late() { sim.simulationFinished(); }
